pipeline {
    agent none

    environment {
        SONARQUBE = 'LocalSonarQube'
        RECIPIENTS = 'shashwatjain177@gmail.com'
        NVD_API_KEY = credentials('NVD_API_KEY')
    }

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Checkout') {
            agent { label 'agent1' }
            steps {
                git branch: 'main', url: 'https://github.com/Shashwat-Manglam-Jain/Jenkins-projects.git'
                stash name: 'source', includes: 'node-app/**'
            }
        }

        stage('Install Dependencies') {
            agent { label 'agent1' }
            steps {
                unstash 'source'
                dir('node-app') {
                    sh 'npm install'
                }
                stash name: 'built', includes: 'node-app/**'
            }
        }

        stage('Parallel Build Tasks') {
            parallel {
                stage('Run Tests') {
                    agent { label 'agent2' }
                    steps {
                        unstash 'built'
                        dir('node-app') {
                            sh 'npm test'
                        }
                    }
                }

                stage('OWASP Dependency Check') {
                    agent { label 'agent3' }
                    steps {
                        unstash 'built'
                        dir('node-app') {
                            sh '''
                                curl -L -o dc.zip https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.10/dependency-check-9.0.10-release.zip
                                unzip -oq dc.zip -d dc
                                ./dc/dependency-check/bin/dependency-check.sh \
                                  --nvdApiKey ${NVD_API_KEY} \
                                  --project "NodeApp" \
                                  --scan . \
                                  --format "HTML" \
                                  --out reports
                            '''
                            archiveArtifacts artifacts: 'node-app/reports/*', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            agent { label 'agent1' }
            steps {
                unstash 'built'
                dir('node-app') {
                    withSonarQubeEnv("${SONARQUBE}") {
                        sh '''
                            sonar-scanner \
                              -Dsonar.projectKey=nodeapp \
                              -Dsonar.sources=. \
                              -Dsonar.exclusions=node_modules/** \
                              -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info || true
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "✅ Jenkins Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    <p>Good news! The Jenkins build <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> completed successfully.</p>
                    <p>Check the console output at <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: "${RECIPIENTS}",
                mimeType: 'text/html'
            )
        }

        failure {
            emailext(
                subject: "❌ Jenkins Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    <p>The Jenkins build <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> has <span style="color:red;">FAILED</span>.</p>
                    <p>Check the logs at <a href="${env.BUILD_URL}">${env.BUILD_URL}</a> for details.</p>
                """,
                to: "${RECIPIENTS}",
                mimeType: 'text/html'
            )
        }
    }
}
